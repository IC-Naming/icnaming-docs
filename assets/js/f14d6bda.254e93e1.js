"use strict";(self.webpackChunkicnaming_docs=self.webpackChunkicnaming_docs||[]).push([[452],{3905:function(e,r,t){t.d(r,{Zo:function(){return u},kt:function(){return d}});var n=t(7294);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function a(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function c(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?a(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function i(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=n.createContext({}),l=function(e){var r=n.useContext(s),t=r;return e&&(t="function"==typeof e?e(r):c(c({},r),e)),t},u=function(e){var r=l(e.components);return n.createElement(s.Provider,{value:r},e.children)},f={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},p=n.forwardRef((function(e,r){var t=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=l(t),d=o,m=p["".concat(s,".").concat(d)]||p[d]||f[d]||a;return t?n.createElement(m,c(c({ref:r},u),{},{components:t})):n.createElement(m,c({ref:r},u))}));function d(e,r){var t=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var a=t.length,c=new Array(a);c[0]=p;var i={};for(var s in r)hasOwnProperty.call(r,s)&&(i[s]=r[s]);i.originalType=e,i.mdxType="string"==typeof e?e:o,c[1]=i;for(var l=2;l<a;l++)c[l]=t[l];return n.createElement.apply(null,c)}return n.createElement.apply(null,t)}p.displayName="MDXCreateElement"},9474:function(e,r,t){t.r(r),t.d(r,{frontMatter:function(){return i},contentTitle:function(){return s},metadata:function(){return l},toc:function(){return u},default:function(){return p}});var n=t(7462),o=t(3366),a=(t(7294),t(3905)),c=["components"],i={},s="Resolver",l={unversionedId:"TechnicalReference/Canister/Resolver",id:"TechnicalReference/Canister/Resolver",title:"Resolver",description:"A resolver is a canister that maps from name to resource (e.g., cryptocurrency addresses, content hash, etc). Resolvers are pointed to by the resolver field of the registry.",source:"@site/docs/TechnicalReference/Canister/Resolver.md",sourceDirName:"TechnicalReference/Canister",slug:"/TechnicalReference/Canister/Resolver",permalink:"/TechnicalReference/Canister/Resolver",editUrl:"https://github.com/IC-Naming/icnaming-docs/blob/main/docs/TechnicalReference/Canister/Resolver.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Registry",permalink:"/TechnicalReference/Canister/Registry"},next:{title:"About IC Naming",permalink:"/AboutUs"}},u=[{value:"DID",id:"did",children:[],level:2}],f={toc:u};function p(e){var r=e.components,t=(0,o.Z)(e,c);return(0,a.kt)("wrapper",(0,n.Z)({},f,t,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"resolver"},"Resolver"),(0,a.kt)("p",null,"A resolver is a canister that maps from name to resource (e.g., cryptocurrency addresses, content hash, etc). Resolvers are pointed to by the resolver field of the registry."),(0,a.kt)("h2",{id:"did"},"DID"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"type ErrorInfo = record { code : nat32; message : text };\ntype Result = variant { Ok : bool; Err : ErrorInfo };\ntype Result_1 = variant { Ok : vec record { text; text }; Err : ErrorInfo };\nservice : {\n  /// Ensure the resolver is created.\n  /// Returns true if the resolver is created, false otherwise.\n  ///\n  /// * `name` - a name. e.g. `hello.icp`\n  ensure_resolver_created : (text) -> (Result);\n\n  /// Get the values for the name\n  /// Returns a map of values.\n  /// \n  /// * `name` - a name. e.g. `hello.icp`\n  get_record_value : (text) -> (Result_1) query;\n\n  /// Set the record values for the name\n  /// Returns true if the record is set, false otherwise.\n  ///\n  /// * `name` - a name. e.g. `hello.icp`\n  /// * `values` - a list of values. e.g. `canister.icp`\n  set_record_value : (text, vec record { text; text }) -> (Result);\n}\n")))}p.isMDXComponent=!0}}]);