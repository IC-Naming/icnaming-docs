"use strict";(self.webpackChunkicnaming_docs=self.webpackChunkicnaming_docs||[]).push([[272],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return m}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=r.createContext({}),l=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=l(e.components);return r.createElement(c.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),f=l(t),m=a,g=f["".concat(c,".").concat(m)]||f[m]||u[m]||o;return t?r.createElement(g,i(i({ref:n},p),{},{components:t})):r.createElement(g,i({ref:n},p))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=f;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=t[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},7925:function(e,n,t){t.r(n),t.d(n,{assets:function(){return p},contentTitle:function(){return c},default:function(){return m},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return u}});var r=t(7462),a=t(3366),o=(t(7294),t(3905)),i=["components"],s={},c="Registrar",l={unversionedId:"TechnicalReference/Canister/Registrar",id:"TechnicalReference/Canister/Registrar",title:"Registrar",description:"A registrar is a canister responsible for allocating domains. Canister to manage registration of names.",source:"@site/docs/TechnicalReference/Canister/Registrar.md",sourceDirName:"TechnicalReference/Canister",slug:"/TechnicalReference/Canister/Registrar",permalink:"/TechnicalReference/Canister/Registrar",editUrl:"https://github.com/IC-Naming/icnaming-docs/blob/main/docs/TechnicalReference/Canister/Registrar.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Canister To Go",permalink:"/TechnicalReference/CanistersToGo"},next:{title:"Registry",permalink:"/TechnicalReference/Canister/Registry"}},p={},u=[{value:"DID",id:"did",level:2}],f={toc:u};function m(e){var n=e.components,t=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},f,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"registrar"},"Registrar"),(0,o.kt)("p",null,"A registrar is a canister responsible for allocating domains. Canister to manage registration of names."),(0,o.kt)("h2",{id:"did"},"DID"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},'service : {\n  /// Check if name is available.\n  /// Returns true if name is available.\n  ///\n  /// * `name` - name to check, e.g. "hello.icp"\n  available : (text) -> (BooleanActorResponse) query;\n  /// Get details for a name.\n  /// Returns details for a name.\n  ///\n  /// * `name` - name to get details for\n  get_details : (text) -> (GetDetailsActorResponse) query;\n  /// Get expiration date for a name.\n  /// Returns expiration date.\n  ///\n  /// * `name` - name to get, e.g. "hello.icp"\n  get_name_expires : (text) -> (GetNameExpiresActorResponse) query;\n  /// Get names for a owner.\n  /// Returns names for a owner.\n  ///\n  /// * `owner` - owner to get names for\n  /// * `page` - page offset and limit\n  get_names : (principal, GetPageInput) -> (GetNamesActorResponse) query;\n  /// get owner for a name.\n  /// Returns owner for a name.\n  ///\n  /// * `name` - name to get owner for\n  get_owner : (text) -> (GetOwnerActorResponse) query;\n  /// Register a name for a owner. This is private method for activity client.\n  /// Returns true if name is registered successfully.\n  ///\n  /// * `name` - name to register, e.g. "hello.icp"\n  /// * `owner` - owner to register the name for\n  /// * `years` - number of years to register the name for\n  register_for : (text, principal, nat64) -> (BooleanActorResponse);\n  /// Register a name for a caller with a quota.\n  /// Returns true if name is registered successfully.\n  ///\n  /// * `name` - name to register, e.g. "hello.icp"\n  /// * `quota_type` - quota type to use\n  register_with_quota : (text, QuotaType) -> (BooleanActorResponse);\n}\ntype BooleanActorResponse = variant { Ok : bool; Err : ErrorInfo };\ntype ErrorInfo = record { code : nat32; message : text };\ntype GetDetailsActorResponse = variant {\n  Ok : RegistrationDetails;\n  Err : ErrorInfo;\n};\ntype GetNameExpiresActorResponse = variant { Ok : nat64; Err : ErrorInfo };\ntype GetNamesActorResponse = variant { Ok : GetPageOutput; Err : ErrorInfo };\ntype GetOwnerActorResponse = variant { Ok : principal; Err : ErrorInfo };\ntype GetPageInput = record { offset : nat64; limit : nat64 };\ntype GetPageOutput = record { items : vec RegistrationDto };\ntype QuotaType = variant { LenEq : nat8; LenGte : nat8 };\ntype RegistrationDetails = record {\n  owner : principal;\n  name : text;\n  created_at : nat64;\n  expired_at : nat64;\n};\ntype RegistrationDto = record {\n  name : text;\n  created_at : nat64;\n  expired_at : nat64;\n};\n')))}m.isMDXComponent=!0}}]);