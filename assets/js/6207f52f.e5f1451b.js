"use strict";(self.webpackChunkicnaming_docs=self.webpackChunkicnaming_docs||[]).push([[272],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=r.createContext({}),c=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=c(e.components);return r.createElement(u.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,u=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),f=c(n),m=a,g=f["".concat(u,".").concat(m)]||f[m]||p[m]||o;return n?r.createElement(g,i(i({ref:t},l),{},{components:n})):r.createElement(g,i({ref:t},l))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=f;var s={};for(var u in t)hasOwnProperty.call(t,u)&&(s[u]=t[u]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},7925:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return u},metadata:function(){return c},toc:function(){return l},default:function(){return f}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),i=["components"],s={},u="Registrar",c={unversionedId:"TechnicalReference/Canister/Registrar",id:"TechnicalReference/Canister/Registrar",title:"Registrar",description:"A registrar is a canister responsible for allocating domains. Canister to manage registration of names.",source:"@site/docs/TechnicalReference/Canister/Registrar.md",sourceDirName:"TechnicalReference/Canister",slug:"/TechnicalReference/Canister/Registrar",permalink:"/TechnicalReference/Canister/Registrar",editUrl:"https://github.com/IC-Naming/icnaming-docs/blob/main/docs/TechnicalReference/Canister/Registrar.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Resolver Keys",permalink:"/TechnicalReference/ResolverKeys"},next:{title:"Registry",permalink:"/TechnicalReference/Canister/Registry"}},l=[{value:"DID",id:"did",children:[],level:2}],p={toc:l};function f(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"registrar"},"Registrar"),(0,o.kt)("p",null,"A registrar is a canister responsible for allocating domains. Canister to manage registration of names."),(0,o.kt)("h2",{id:"did"},"DID"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},'type ErrorInfo = record { code : nat32; message : text };\ntype GetPageInput = record { offset : nat64; limit : nat64 };\ntype GetPageOutput = record { items : vec RegistrationDto };\ntype QuotaType = variant { LenEq : nat8; LenGte : nat8 };\ntype RegistrationDetails = record {\n  owner : principal;\n  name : text;\n  created_at : nat64;\n  expired_at : nat64;\n};\ntype RegistrationDto = record {\n  name : text;\n  created_at : nat64;\n  expired_at : nat64;\n};\ntype Result = variant { Ok : bool; Err : ErrorInfo };\ntype Result_1 = variant { Ok : RegistrationDetails; Err : ErrorInfo };\ntype Result_2 = variant { Ok : nat64; Err : ErrorInfo };\ntype Result_3 = variant { Ok : GetPageOutput; Err : ErrorInfo };\ntype Result_4 = variant { Ok : principal; Err : ErrorInfo };\ntype Result_5 = variant { Ok : nat32; Err : ErrorInfo };\nservice : {\n  /// Add quotas to a quota owner.\n  /// Returns true if quotas are added successfully.\n  ///\n  /// * `quota_owner` - owner to add quotas to\n  /// * `quota_type` - quota type to add\n  /// * `diff` - number of quotas to add\n  add_quota : (principal, QuotaType, nat32) -> (Result);\n\n  /// Check if name is available.\n  /// Returns true if name is available.\n  ///\n  /// * `name` - name to check, e.g. "hello.icp"\n  available : (text) -> (Result) query;\n\n  /// Get details for a name.\n  /// Returns details for a name.\n  ///\n  /// * `name` - name to get details for\n  get_details : (text) -> (Result_1) query;\n\n  /// Get expiration date for a name.\n  /// Returns expiration date.\n  ///\n  /// * `name` - name to get, e.g. "hello.icp"\n  get_name_expires : (text) -> (Result_2) query;\n\n  /// Get names for a owner.\n  /// Returns names for a owner.\n  ///\n  /// * `owner` - owner to get names for\n  /// * `page` - page offset and limit\n  get_names : (principal, GetPageInput) -> (Result_3) query;\n\n  /// get owner for a name.\n  /// Returns owner for a name.\n  ///\n  /// * `name` - name to get owner for\n  get_owner : (text) -> (Result_4) query;\n\n  /// Get quotas for a quota owner.\n  /// Returns quotas for a quota owner.\n  ///\n  /// * `quota_owner` - owner to get quotas for\n  /// * `quota_type` - quota type to get\n  get_quota : (principal, QuotaType) -> (Result_5) query;\n\n  /// Register a name for a owner. This is private method for activity client.\n  /// Returns true if name is registered successfully.\n  ///\n  /// * `name` - name to register, e.g. "hello.icp"\n  /// * `owner` - owner to register the name for\n  /// * `years` - number of years to register the name for\n  register_for : (text, principal, nat64) -> (Result);\n\n  /// Register a name for a caller with a quota.\n  /// Returns true if name is registered successfully.\n  ///\n  /// * `name` - name to register, e.g. "hello.icp"\n  /// * `quota_type` - quota type to use\n  register_with_quota : (text, QuotaType) -> (Result);\n\n  /// Remove quotas from a quota owner.\n  /// Returns true if quotas are removed successfully.\n  ///\n  /// * `quota_owner` - owner to remove quotas from\n  /// * `quota_type` - quota type to remove\n  /// * `diff` - number of quotas to remove\n  sub_quota : (principal, QuotaType, nat32) -> (Result);\n}\n')))}f.isMDXComponent=!0}}]);