"use strict";(self.webpackChunkicnaming_docs=self.webpackChunkicnaming_docs||[]).push([[272],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),f=l(n),m=a,g=f["".concat(c,".").concat(m)]||f[m]||u[m]||o;return n?r.createElement(g,i(i({ref:t},p),{},{components:n})):r.createElement(g,i({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=f;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},7925:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var r=n(7462),a=(n(7294),n(3905));const o={},i="Registrar",s={unversionedId:"TechnicalReference/Canister/Registrar",id:"TechnicalReference/Canister/Registrar",title:"Registrar",description:"A registrar is a canister responsible for allocating domains. Canister to manage registration of names.",source:"@site/docs/TechnicalReference/Canister/Registrar.md",sourceDirName:"TechnicalReference/Canister",slug:"/TechnicalReference/Canister/Registrar",permalink:"/TechnicalReference/Canister/Registrar",draft:!1,editUrl:"https://github.com/IC-Naming/icnaming-docs/blob/main/docs/TechnicalReference/Canister/Registrar.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Canister To Go",permalink:"/TechnicalReference/CanistersToGo"},next:{title:"Registry",permalink:"/TechnicalReference/Canister/Registry"}},c={},l=[{value:"DID",id:"did",level:2}],p={toc:l};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"registrar"},"Registrar"),(0,a.kt)("p",null,"A registrar is a canister responsible for allocating domains. Canister to manage registration of names."),(0,a.kt)("h2",{id:"did"},"DID"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'service : {\n  /// Check if name is available.\n  /// Returns true if name is available.\n  ///\n  /// * `name` - name to check, e.g. "hello.icp"\n  available : (text) -> (BooleanActorResponse) query;\n  /// Get details for a name.\n  /// Returns details for a name.\n  ///\n  /// * `name` - name to get details for\n  get_details : (text) -> (GetDetailsActorResponse) query;\n  /// Get expiration date for a name.\n  /// Returns expiration date.\n  ///\n  /// * `name` - name to get, e.g. "hello.icp"\n  get_name_expires : (text) -> (GetNameExpiresActorResponse) query;\n  /// Get names for a owner.\n  /// Returns names for a owner.\n  ///\n  /// * `owner` - owner to get names for\n  /// * `page` - page offset and limit\n  get_names : (principal, GetPageInput) -> (GetNamesActorResponse) query;\n  /// get owner for a name.\n  /// Returns owner for a name.\n  ///\n  /// * `name` - name to get owner for\n  get_owner : (text) -> (GetOwnerActorResponse) query;\n  /// Register a name for a owner. This is private method for activity client.\n  /// Returns true if name is registered successfully.\n  ///\n  /// * `name` - name to register, e.g. "hello.icp"\n  /// * `owner` - owner to register the name for\n  /// * `years` - number of years to register the name for\n  register_for : (text, principal, nat64) -> (BooleanActorResponse);\n  /// Register a name for a caller with a quota.\n  /// Returns true if name is registered successfully.\n  ///\n  /// * `name` - name to register, e.g. "hello.icp"\n  /// * `quota_type` - quota type to use\n  register_with_quota : (text, QuotaType) -> (BooleanActorResponse);\n}\ntype BooleanActorResponse = variant { Ok : bool; Err : ErrorInfo };\ntype ErrorInfo = record { code : nat32; message : text };\ntype GetDetailsActorResponse = variant {\n  Ok : RegistrationDetails;\n  Err : ErrorInfo;\n};\ntype GetNameExpiresActorResponse = variant { Ok : nat64; Err : ErrorInfo };\ntype GetNamesActorResponse = variant { Ok : GetPageOutput; Err : ErrorInfo };\ntype GetOwnerActorResponse = variant { Ok : principal; Err : ErrorInfo };\ntype GetPageInput = record { offset : nat64; limit : nat64 };\ntype GetPageOutput = record { items : vec RegistrationDto };\ntype QuotaType = variant { LenEq : nat8; LenGte : nat8 };\ntype RegistrationDetails = record {\n  owner : principal;\n  name : text;\n  created_at : nat64;\n  expired_at : nat64;\n};\ntype RegistrationDto = record {\n  name : text;\n  created_at : nat64;\n  expired_at : nat64;\n};\n')))}u.isMDXComponent=!0}}]);